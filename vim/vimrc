" VIM/NEOVIM config file

" NOTES:
"
" If you want to do custom configuration you can use the file:
"
"     " vim runtime path
"     $HOME/.vim/plugin/local.vim
"     " neovim runtime path
"     $XDG_CONFIG_HOME/nvim/plugin/local.vim
"
" This file is not tracked by this repository and it will be loaded
" by default by (neo)vim.

" Main settings
" =============================================================================

set nocompatible " Don't try to support vi
set encoding=utf-8 " default character encoding

" Set leader keys before anything else
let mapleader      = " "
let maplocalleader = ","

" backups
set nobackup   " No backup
set noswapfile " No swap files

" behaviors
set modeline       " be able to use modelines when a file is loaded
set hidden         " buffers management, don't close the buffers
set autoread       " auto-reload modified files (with no local changes)
set nojoinspaces   " put only one space after joining.

" use the system clipboard as the default register
set clipboard=unnamed,unnamedplus

" indentation
set tabstop=2      " number of visual spaces per TAB.
set shiftwidth=2   " number of spaces to use for each step of (auto)indent.
set softtabstop=2  " number of spaces in tab when editing.
set shiftround     " round indent to multiple of 'shiftwidth'
set expandtab      " tabs are spaces
set backspace=indent,eol,start
set smarttab
set autoindent
set copyindent
set smartindent

" listchars
set listchars=trail:~,tab:▸\ ,eol:¬ " show special characters
set list

" search
set ignorecase  " ignore case in search
set smartcase   " override ignorecase if uppercase is used in search
set hlsearch    " highlight search
set incsearch   " search as characters are entered

" wildmenu
set wildmenu
set wildmode=list:longest,full

set wildignore+=.hg,.git,.svn                    " version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " vim swap files
set wildignore+=*.DS_Store                       " osx bullshit
set wildignore+=*.pyc                            " python byte code
set wildignore+=*.orig                           " merge resolution files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip         " tmp files

" statusline
set notitle            " don't set the terminal title
set laststatus=2       " always show statusline
set number             " you need line numbers
set ruler              " see where you are
set wrap               " wrap long lines without changing it
set visualbell         " use visual bell, not sound
set shortmess=aI       " modify the error and info messages
set scrolloff=3        " screen lines to keep above and below the cursor
set virtualedit+=block " put the cursor anywhere in visual blocks
set cursorline         " show where you are
set lazyredraw

if has('nvim')
  set inccommand=split
endif

" Plugins
" =============================================================================
filetype off
call plug#begin()
if has('nvim')
  Plug 'neomake/neomake'
  Plug 'kassio/neoterm'
else
  Plug 'tpope/vim-dispatch'
  Plug 'scrooloose/syntastic'
endif

Plug 'janko-m/vim-test'
Plug 'mhinz/vim-grepper'
Plug 'vim-scripts/matchit.zip'
Plug 'sheerun/vim-polyglot'
Plug 'rust-lang/rust.vim'
Plug 'kana/vim-smartinput'
Plug 'jgdavey/vim-blockle'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-projectionist'
Plug 'ElmCast/elm-vim'

Plug 'NLKNguyen/papercolor-theme'
Plug 'joshdick/onedark.vim'
Plug 'tomasr/molokai'
Plug 'mhartington/oceanic-next'

Plug 'PotatoesMaster/i3-vim-syntax'

Plug 'MarcWeber/vim-addon-local-vimrc'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

if executable('scout')
  Plug 'jhbabon/scout.vim'
endif
call plug#end()

if has('nvim')
  " Neomake
  autocmd! BufReadPost,BufWritePost * Neomake
  let g:neomake_open_list = 0

  " Neoterm
  let g:neoterm_size = '15%'
  let g:neoterm_autoscroll = 1

  " vim-test
  let g:test#strategy = "neoterm"
  nmap <leader>rs :TestFile<cr>
  nmap <leader>rl :TestNearest<cr>
else
  " Dispatch
  autocmd FileType ruby let b:dispatch = '/usr/bin/env ruby %'
  autocmd FileType rust let b:dispatch = 'cargo build'
  nmap <leader>d :Dispatch<cr>
  nmap <leader>D :Dispatch!<cr>
  nmap <leader>st :Start<space>
  nmap <leader>St :Start!<space>
  nmap <localleader>d :Dispatch<space>
  nmap <localleader>D :Dispatch!<space>
endif

" Grepper
let g:grepper = { 'tools': ['rg', 'git', 'ag'] }
nnoremap \ :Grepper -query<space>
" bind K to grep word under cursor
nnoremap K :Grepper -noprompt -cword<CR>
nnoremap <leader>s :Grepper<CR>

" Blocke
let g:blockle_mapping = '<leader>rb'

" Don't load elm.vim mappings
let g:elm_setup_keybindings = 0

" Fugitive
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gd :Gdiff<CR>

" Scout
if executable('scout')
  let g:scout_find_files_command = 'rg --files --hidden --follow --glob "!.git/*" 2>/dev/null'

  nnoremap <leader>ff :ScoutFiles<cr>
  nnoremap <leader>fb :ScoutBuffers<cr>
endif

nnoremap <leader>fe :Explore<cr>

" Projectionist
if !exists('g:projectionist_transformations')
  let g:projectionist_transformations = {}
endif

" Custom transformations

" rspec
"
" Use it to generate the correct name of the module in the spec
" Is intended to be used after camelcase and colons
"
" @example
"   Given the template
"   describe {camelcase|colons|rspec} do
"
"   Input => describe engines/spec/lib/fancy/awesome do
"   Output => describe Fancy::Awesome do
function! g:projectionist_transformations.rspec(input, o) abort
  return substitute(a:input, '.*Spec::\(\w\+\)::\(.\+\)$', '\2', 'g')
endfunction

let g:projectionist_heuristics = {
      \   "Gemfile|*.gemspec": {
      \     "*_spec.rb": {
      \       "type": "spec",
      \       "template": [
      \         "require 'spec_helper'",
      \         "",
      \         "describe {camelcase|capitalize|colons|rspec} do",
      \         "end"
      \       ]
      \     }
      \   }
      \ }

" Ragtag
let g:ragtag_global_maps = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]


" Colors

if (has("termguicolors"))
 set termguicolors
endif

syntax enable
colorscheme onedark

" Lightline
let g:lightline = { 'colorscheme': 'one' }

filetype plugin indent on

" Functions
" =============================================================================

" Delete EOL whitespace
" link: http://sartak.org/2011/03/end-of-line-whitespace-in-vim.html
function! StripTrailingWhitespace()
  " preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Mappings
" =============================================================================

" Go to Normal mode fast
imap jj <ESC>

" copy file path to clipboard
map <leader>% :let @+ = expand("%")<cr>

" add ; or , to the end of the line, when missing
nnoremap <leader>; :s/\([^;]\)$/\1;/<CR>:noh<CR>
nnoremap <leader>, :s/\([^,]\)$/\1,/<CR>:noh<CR>

" clear highlighted search
map <leader>nh :nohl<CR>

" Map trailing whitespace method
nmap <silent> <leader><space> :call StripTrailingWhitespace()<CR>

" quick list and location list
map <leader>qo :copen<CR>
map <leader>lo :lopen<CR>

map <leader>qc :cclose<CR>
map <leader>lc :lclose<CR>
